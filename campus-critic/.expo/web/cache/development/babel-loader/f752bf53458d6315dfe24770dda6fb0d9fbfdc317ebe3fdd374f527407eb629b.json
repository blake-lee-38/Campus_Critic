{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nfunction _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }\nfunction _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }\nimport { isAndroid, isBoolean, isString, isNull, isValidUrl } from '@react-native-firebase/app/lib/common';\nimport { createModuleNamespace, FirebaseModule, getFirebaseRoot } from '@react-native-firebase/app/lib/internal';\nimport ConfirmationResult from \"./ConfirmationResult\";\nimport PhoneAuthListener from \"./PhoneAuthListener\";\nimport EmailAuthProvider from \"./providers/EmailAuthProvider\";\nimport FacebookAuthProvider from \"./providers/FacebookAuthProvider\";\nimport GithubAuthProvider from \"./providers/GithubAuthProvider\";\nimport GoogleAuthProvider from \"./providers/GoogleAuthProvider\";\nimport OAuthProvider from \"./providers/OAuthProvider\";\nimport OIDCAuthProvider from \"./providers/OIDCAuthProvider\";\nimport PhoneAuthProvider from \"./providers/PhoneAuthProvider\";\nimport PhoneMultiFactorGenerator from \"./PhoneMultiFactorGenerator\";\nimport TwitterAuthProvider from \"./providers/TwitterAuthProvider\";\nimport AppleAuthProvider from \"./providers/AppleAuthProvider\";\nimport Settings from \"./Settings\";\nimport User from \"./User\";\nimport version from \"./version\";\nimport { getMultiFactorResolver as _getMultiFactorResolver } from \"./getMultiFactorResolver\";\nimport { multiFactor, MultiFactorUser } from \"./multiFactor\";\nvar statics = {\n  AppleAuthProvider: AppleAuthProvider,\n  EmailAuthProvider: EmailAuthProvider,\n  PhoneAuthProvider: PhoneAuthProvider,\n  GoogleAuthProvider: GoogleAuthProvider,\n  GithubAuthProvider: GithubAuthProvider,\n  TwitterAuthProvider: TwitterAuthProvider,\n  FacebookAuthProvider: FacebookAuthProvider,\n  PhoneMultiFactorGenerator: PhoneMultiFactorGenerator,\n  OAuthProvider: OAuthProvider,\n  OIDCAuthProvider: OIDCAuthProvider,\n  PhoneAuthState: {\n    CODE_SENT: 'sent',\n    AUTO_VERIFY_TIMEOUT: 'timeout',\n    AUTO_VERIFIED: 'verified',\n    ERROR: 'error'\n  },\n  getMultiFactorResolver: _getMultiFactorResolver,\n  multiFactor: multiFactor\n};\nvar namespace = 'auth';\nvar nativeModuleName = 'RNFBAuthModule';\nvar FirebaseAuthModule = function (_FirebaseModule) {\n  _inherits(FirebaseAuthModule, _FirebaseModule);\n  function FirebaseAuthModule() {\n    var _this;\n    _classCallCheck(this, FirebaseAuthModule);\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    _this = _callSuper(this, FirebaseAuthModule, [].concat(args));\n    _this._user = null;\n    _this._settings = null;\n    _this._authResult = false;\n    _this._languageCode = _this.native.APP_LANGUAGE[_this.app._name];\n    _this._tenantId = null;\n    if (!_this.languageCode) {\n      _this._languageCode = _this.native.APP_LANGUAGE['[DEFAULT]'];\n    }\n    if (_this.native.APP_USER[_this.app._name]) {\n      _this._setUser(_this.native.APP_USER[_this.app._name]);\n    }\n    _this.emitter.addListener(_this.eventNameForApp('auth_state_changed'), function (event) {\n      _this._setUser(event.user);\n      _this.emitter.emit(_this.eventNameForApp('onAuthStateChanged'), _this._user);\n    });\n    _this.emitter.addListener(_this.eventNameForApp('phone_auth_state_changed'), function (event) {\n      var eventKey = `phone:auth:${event.requestKey}:${event.type}`;\n      _this.emitter.emit(eventKey, event.state);\n    });\n    _this.emitter.addListener(_this.eventNameForApp('auth_id_token_changed'), function (auth) {\n      _this._setUser(auth.user);\n      _this.emitter.emit(_this.eventNameForApp('onIdTokenChanged'), _this._user);\n    });\n    _this.native.addAuthStateListener();\n    _this.native.addIdTokenListener();\n    return _this;\n  }\n  _createClass(FirebaseAuthModule, [{\n    key: \"languageCode\",\n    get: function get() {\n      return this._languageCode;\n    }\n  }, {\n    key: \"tenantId\",\n    get: function get() {\n      return this._tenantId;\n    }\n  }, {\n    key: \"settings\",\n    get: function get() {\n      if (!this._settings) {\n        this._settings = new Settings(this);\n      }\n      return this._settings;\n    }\n  }, {\n    key: \"currentUser\",\n    get: function get() {\n      return this._user;\n    }\n  }, {\n    key: \"_setUser\",\n    value: function _setUser(user) {\n      this._user = user ? new User(this, user) : null;\n      this._authResult = true;\n      this.emitter.emit(this.eventNameForApp('onUserChanged'), this._user);\n      return this._user;\n    }\n  }, {\n    key: \"_setUserCredential\",\n    value: function _setUserCredential(userCredential) {\n      var user = new User(this, userCredential.user);\n      this._user = user;\n      this._authResult = true;\n      this.emitter.emit(this.eventNameForApp('onUserChanged'), this._user);\n      return {\n        additionalUserInfo: userCredential.additionalUserInfo,\n        user: user\n      };\n    }\n  }, {\n    key: \"setLanguageCode\",\n    value: function () {\n      var _setLanguageCode = _asyncToGenerator(function* (code) {\n        if (!isString(code) && !isNull(code)) {\n          throw new Error(\"firebase.auth().setLanguageCode(*) expected 'languageCode' to be a string or null value\");\n        }\n        yield this.native.setLanguageCode(code);\n        if (code === null) {\n          this._languageCode = this.native.APP_LANGUAGE[this.app._name];\n          if (!this.languageCode) {\n            this._languageCode = this.native.APP_LANGUAGE['[DEFAULT]'];\n          }\n        } else {\n          this._languageCode = code;\n        }\n      });\n      function setLanguageCode(_x) {\n        return _setLanguageCode.apply(this, arguments);\n      }\n      return setLanguageCode;\n    }()\n  }, {\n    key: \"setTenantId\",\n    value: function () {\n      var _setTenantId = _asyncToGenerator(function* (tenantId) {\n        if (!isString(tenantId)) {\n          throw new Error(\"firebase.auth().setTenantId(*) expected 'tenantId' to be a string\");\n        }\n        this._tenantId = tenantId;\n        yield this.native.setTenantId(tenantId);\n      });\n      function setTenantId(_x2) {\n        return _setTenantId.apply(this, arguments);\n      }\n      return setTenantId;\n    }()\n  }, {\n    key: \"_parseListener\",\n    value: function _parseListener(listenerOrObserver) {\n      return typeof listenerOrObserver === 'object' ? listenerOrObserver.next.bind(listenerOrObserver) : listenerOrObserver;\n    }\n  }, {\n    key: \"onAuthStateChanged\",\n    value: function onAuthStateChanged(listenerOrObserver) {\n      var _this2 = this;\n      var listener = this._parseListener(listenerOrObserver);\n      var subscription = this.emitter.addListener(this.eventNameForApp('onAuthStateChanged'), listener);\n      if (this._authResult) {\n        Promise.resolve().then(function () {\n          listener(_this2._user || null);\n        });\n      }\n      return function () {\n        return subscription.remove();\n      };\n    }\n  }, {\n    key: \"onIdTokenChanged\",\n    value: function onIdTokenChanged(listenerOrObserver) {\n      var _this3 = this;\n      var listener = this._parseListener(listenerOrObserver);\n      var subscription = this.emitter.addListener(this.eventNameForApp('onIdTokenChanged'), listener);\n      if (this._authResult) {\n        Promise.resolve().then(function () {\n          listener(_this3._user || null);\n        });\n      }\n      return function () {\n        return subscription.remove();\n      };\n    }\n  }, {\n    key: \"onUserChanged\",\n    value: function onUserChanged(listenerOrObserver) {\n      var _this4 = this;\n      var listener = this._parseListener(listenerOrObserver);\n      var subscription = this.emitter.addListener(this.eventNameForApp('onUserChanged'), listener);\n      if (this._authResult) {\n        Promise.resolve().then(function () {\n          listener(_this4._user || null);\n        });\n      }\n      return function () {\n        subscription.remove();\n      };\n    }\n  }, {\n    key: \"signOut\",\n    value: function signOut() {\n      var _this5 = this;\n      return this.native.signOut().then(function () {\n        _this5._setUser();\n      });\n    }\n  }, {\n    key: \"signInAnonymously\",\n    value: function signInAnonymously() {\n      var _this6 = this;\n      return this.native.signInAnonymously().then(function (userCredential) {\n        return _this6._setUserCredential(userCredential);\n      });\n    }\n  }, {\n    key: \"signInWithPhoneNumber\",\n    value: function signInWithPhoneNumber(phoneNumber, forceResend) {\n      var _this7 = this;\n      if (isAndroid) {\n        return this.native.signInWithPhoneNumber(phoneNumber, forceResend || false).then(function (result) {\n          return new ConfirmationResult(_this7, result.verificationId);\n        });\n      }\n      return this.native.signInWithPhoneNumber(phoneNumber).then(function (result) {\n        return new ConfirmationResult(_this7, result.verificationId);\n      });\n    }\n  }, {\n    key: \"verifyPhoneNumber\",\n    value: function verifyPhoneNumber(phoneNumber, autoVerifyTimeoutOrForceResend, forceResend) {\n      var _forceResend = forceResend;\n      var _autoVerifyTimeout = 60;\n      if (isBoolean(autoVerifyTimeoutOrForceResend)) {\n        _forceResend = autoVerifyTimeoutOrForceResend;\n      } else {\n        _autoVerifyTimeout = autoVerifyTimeoutOrForceResend;\n      }\n      return new PhoneAuthListener(this, phoneNumber, _autoVerifyTimeout, _forceResend);\n    }\n  }, {\n    key: \"verifyPhoneNumberWithMultiFactorInfo\",\n    value: function verifyPhoneNumberWithMultiFactorInfo(multiFactorHint, session) {\n      return this.native.verifyPhoneNumberWithMultiFactorInfo(multiFactorHint.uid, session);\n    }\n  }, {\n    key: \"verifyPhoneNumberForMultiFactor\",\n    value: function verifyPhoneNumberForMultiFactor(phoneInfoOptions) {\n      var phoneNumber = phoneInfoOptions.phoneNumber,\n        session = phoneInfoOptions.session;\n      return this.native.verifyPhoneNumberForMultiFactor(phoneNumber, session);\n    }\n  }, {\n    key: \"resolveMultiFactorSignIn\",\n    value: function resolveMultiFactorSignIn(session, verificationId, verificationCode) {\n      var _this8 = this;\n      return this.native.resolveMultiFactorSignIn(session, verificationId, verificationCode).then(function (userCredential) {\n        return _this8._setUserCredential(userCredential);\n      });\n    }\n  }, {\n    key: \"createUserWithEmailAndPassword\",\n    value: function createUserWithEmailAndPassword(email, password) {\n      var _this9 = this;\n      return this.native.createUserWithEmailAndPassword(email, password).then(function (userCredential) {\n        return _this9._setUserCredential(userCredential);\n      });\n    }\n  }, {\n    key: \"signInWithEmailAndPassword\",\n    value: function signInWithEmailAndPassword(email, password) {\n      var _this10 = this;\n      return this.native.signInWithEmailAndPassword(email, password).then(function (userCredential) {\n        return _this10._setUserCredential(userCredential);\n      });\n    }\n  }, {\n    key: \"signInWithCustomToken\",\n    value: function signInWithCustomToken(customToken) {\n      var _this11 = this;\n      return this.native.signInWithCustomToken(customToken).then(function (userCredential) {\n        return _this11._setUserCredential(userCredential);\n      });\n    }\n  }, {\n    key: \"signInWithCredential\",\n    value: function signInWithCredential(credential) {\n      var _this12 = this;\n      return this.native.signInWithCredential(credential.providerId, credential.token, credential.secret).then(function (userCredential) {\n        return _this12._setUserCredential(userCredential);\n      });\n    }\n  }, {\n    key: \"sendPasswordResetEmail\",\n    value: function sendPasswordResetEmail(email) {\n      var actionCodeSettings = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      return this.native.sendPasswordResetEmail(email, actionCodeSettings);\n    }\n  }, {\n    key: \"sendSignInLinkToEmail\",\n    value: function sendSignInLinkToEmail(email) {\n      var actionCodeSettings = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return this.native.sendSignInLinkToEmail(email, actionCodeSettings);\n    }\n  }, {\n    key: \"isSignInWithEmailLink\",\n    value: function isSignInWithEmailLink(emailLink) {\n      return typeof emailLink === 'string' && (emailLink.includes('mode=signIn') || emailLink.includes('mode%3DsignIn')) && (emailLink.includes('oobCode=') || emailLink.includes('oobCode%3D'));\n    }\n  }, {\n    key: \"signInWithEmailLink\",\n    value: function signInWithEmailLink(email, emailLink) {\n      var _this13 = this;\n      return this.native.signInWithEmailLink(email, emailLink).then(function (userCredential) {\n        return _this13._setUserCredential(userCredential);\n      });\n    }\n  }, {\n    key: \"confirmPasswordReset\",\n    value: function confirmPasswordReset(code, newPassword) {\n      return this.native.confirmPasswordReset(code, newPassword);\n    }\n  }, {\n    key: \"applyActionCode\",\n    value: function applyActionCode(code) {\n      var _this14 = this;\n      return this.native.applyActionCode(code).then(function (user) {\n        _this14._setUser(user);\n      });\n    }\n  }, {\n    key: \"checkActionCode\",\n    value: function checkActionCode(code) {\n      return this.native.checkActionCode(code);\n    }\n  }, {\n    key: \"fetchSignInMethodsForEmail\",\n    value: function fetchSignInMethodsForEmail(email) {\n      return this.native.fetchSignInMethodsForEmail(email);\n    }\n  }, {\n    key: \"verifyPasswordResetCode\",\n    value: function verifyPasswordResetCode(code) {\n      return this.native.verifyPasswordResetCode(code);\n    }\n  }, {\n    key: \"useUserAccessGroup\",\n    value: function useUserAccessGroup(userAccessGroup) {\n      if (isAndroid) {\n        return Promise.resolve();\n      }\n      return this.native.useUserAccessGroup(userAccessGroup);\n    }\n  }, {\n    key: \"getRedirectResult\",\n    value: function getRedirectResult() {\n      throw new Error('firebase.auth().getRedirectResult() is unsupported by the native Firebase SDKs.');\n    }\n  }, {\n    key: \"setPersistence\",\n    value: function setPersistence() {\n      throw new Error('firebase.auth().setPersistence() is unsupported by the native Firebase SDKs.');\n    }\n  }, {\n    key: \"signInWithPopup\",\n    value: function signInWithPopup() {\n      throw new Error('firebase.auth().signInWithPopup() is unsupported by the native Firebase SDKs.');\n    }\n  }, {\n    key: \"signInWithRedirect\",\n    value: function signInWithRedirect() {\n      throw new Error('firebase.auth().signInWithRedirect() is unsupported by the native Firebase SDKs.');\n    }\n  }, {\n    key: \"useDeviceLanguage\",\n    value: function useDeviceLanguage() {\n      throw new Error('firebase.auth().useDeviceLanguage() is unsupported by the native Firebase SDKs.');\n    }\n  }, {\n    key: \"useEmulator\",\n    value: function useEmulator(url) {\n      if (!url || !isString(url) || !isValidUrl(url)) {\n        throw new Error('firebase.auth().useEmulator() takes a non-empty string URL');\n      }\n      var _url = url;\n      var androidBypassEmulatorUrlRemap = typeof this.firebaseJson.android_bypass_emulator_url_remap === 'boolean' && this.firebaseJson.android_bypass_emulator_url_remap;\n      if (!androidBypassEmulatorUrlRemap && isAndroid && _url) {\n        if (_url.startsWith('http://localhost')) {\n          _url = _url.replace('http://localhost', 'http://10.0.2.2');\n          console.log('Mapping auth host \"localhost\" to \"10.0.2.2\" for android emulators. Use real IP on real devices. You can bypass this behaviour with \"android_bypass_emulator_url_remap\" flag.');\n        }\n        if (_url.startsWith('http://127.0.0.1')) {\n          _url = _url.replace('http://127.0.0.1', 'http://10.0.2.2');\n          console.log('Mapping auth host \"127.0.0.1\" to \"10.0.2.2\" for android emulators. Use real IP on real devices. You can bypass this behaviour with \"android_bypass_emulator_url_remap\" flag.');\n        }\n      }\n      var hostPortRegex = /^http:\\/\\/([\\w\\d-.]+):(\\d+)$/;\n      var urlMatches = _url.match(hostPortRegex);\n      if (!urlMatches) {\n        throw new Error('firebase.auth().useEmulator() unable to parse host and port from URL');\n      }\n      var host = urlMatches[1];\n      var port = parseInt(urlMatches[2], 10);\n      this.native.useEmulator(host, port);\n      return [host, port];\n    }\n  }, {\n    key: \"getMultiFactorResolver\",\n    value: function getMultiFactorResolver(error) {\n      return _getMultiFactorResolver(this, error);\n    }\n  }, {\n    key: \"multiFactor\",\n    value: function multiFactor(user) {\n      if (user.userId !== this.currentUser.userId) {\n        throw new Error('firebase.auth().multiFactor() only operates on currentUser');\n      }\n      return new MultiFactorUser(this, user);\n    }\n  }]);\n  return FirebaseAuthModule;\n}(FirebaseModule);\nexport var SDK_VERSION = version;\nexport default createModuleNamespace({\n  statics: statics,\n  version: version,\n  namespace: namespace,\n  nativeModuleName: nativeModuleName,\n  nativeEvents: ['auth_state_changed', 'auth_id_token_changed', 'phone_auth_state_changed'],\n  hasMultiAppSupport: true,\n  hasCustomUrlOrRegionSupport: false,\n  ModuleClass: FirebaseAuthModule\n});\nexport var firebase = getFirebaseRoot();","map":{"version":3,"names":["isAndroid","isBoolean","isString","isNull","isValidUrl","createModuleNamespace","FirebaseModule","getFirebaseRoot","ConfirmationResult","PhoneAuthListener","EmailAuthProvider","FacebookAuthProvider","GithubAuthProvider","GoogleAuthProvider","OAuthProvider","OIDCAuthProvider","PhoneAuthProvider","PhoneMultiFactorGenerator","TwitterAuthProvider","AppleAuthProvider","Settings","User","version","getMultiFactorResolver","multiFactor","MultiFactorUser","statics","PhoneAuthState","CODE_SENT","AUTO_VERIFY_TIMEOUT","AUTO_VERIFIED","ERROR","namespace","nativeModuleName","FirebaseAuthModule","_FirebaseModule","_inherits","_this","_classCallCheck","_len","arguments","length","args","Array","_key","_callSuper","concat","_user","_settings","_authResult","_languageCode","native","APP_LANGUAGE","app","_name","_tenantId","languageCode","APP_USER","_setUser","emitter","addListener","eventNameForApp","event","user","emit","eventKey","requestKey","type","state","auth","addAuthStateListener","addIdTokenListener","_createClass","key","get","value","_setUserCredential","userCredential","additionalUserInfo","_setLanguageCode","_asyncToGenerator","code","Error","setLanguageCode","_x","apply","_setTenantId","tenantId","setTenantId","_x2","_parseListener","listenerOrObserver","next","bind","onAuthStateChanged","_this2","listener","subscription","Promise","resolve","then","remove","onIdTokenChanged","_this3","onUserChanged","_this4","signOut","_this5","signInAnonymously","_this6","signInWithPhoneNumber","phoneNumber","forceResend","_this7","result","verificationId","verifyPhoneNumber","autoVerifyTimeoutOrForceResend","_forceResend","_autoVerifyTimeout","verifyPhoneNumberWithMultiFactorInfo","multiFactorHint","session","uid","verifyPhoneNumberForMultiFactor","phoneInfoOptions","resolveMultiFactorSignIn","verificationCode","_this8","createUserWithEmailAndPassword","email","password","_this9","signInWithEmailAndPassword","_this10","signInWithCustomToken","customToken","_this11","signInWithCredential","credential","_this12","providerId","token","secret","sendPasswordResetEmail","actionCodeSettings","undefined","sendSignInLinkToEmail","isSignInWithEmailLink","emailLink","includes","signInWithEmailLink","_this13","confirmPasswordReset","newPassword","applyActionCode","_this14","checkActionCode","fetchSignInMethodsForEmail","verifyPasswordResetCode","useUserAccessGroup","userAccessGroup","getRedirectResult","setPersistence","signInWithPopup","signInWithRedirect","useDeviceLanguage","useEmulator","url","_url","androidBypassEmulatorUrlRemap","firebaseJson","android_bypass_emulator_url_remap","startsWith","replace","console","log","hostPortRegex","urlMatches","match","host","port","parseInt","error","userId","currentUser","SDK_VERSION","nativeEvents","hasMultiAppSupport","hasCustomUrlOrRegionSupport","ModuleClass","firebase"],"sources":["C:/Users/Blake/Desktop/VS-Code-Projects/Campus_Critic/campus-critic/node_modules/@react-native-firebase/auth/lib/index.js"],"sourcesContent":["/*\n * Copyright (c) 2016-present Invertase Limited & Contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this library except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport {\n  isAndroid,\n  isBoolean,\n  isString,\n  isNull,\n  isValidUrl,\n} from '@react-native-firebase/app/lib/common';\nimport {\n  createModuleNamespace,\n  FirebaseModule,\n  getFirebaseRoot,\n} from '@react-native-firebase/app/lib/internal';\nimport ConfirmationResult from './ConfirmationResult';\nimport PhoneAuthListener from './PhoneAuthListener';\nimport EmailAuthProvider from './providers/EmailAuthProvider';\nimport FacebookAuthProvider from './providers/FacebookAuthProvider';\nimport GithubAuthProvider from './providers/GithubAuthProvider';\nimport GoogleAuthProvider from './providers/GoogleAuthProvider';\nimport OAuthProvider from './providers/OAuthProvider';\nimport OIDCAuthProvider from './providers/OIDCAuthProvider';\nimport PhoneAuthProvider from './providers/PhoneAuthProvider';\nimport PhoneMultiFactorGenerator from './PhoneMultiFactorGenerator';\nimport TwitterAuthProvider from './providers/TwitterAuthProvider';\nimport AppleAuthProvider from './providers/AppleAuthProvider';\nimport Settings from './Settings';\nimport User from './User';\nimport version from './version';\nimport { getMultiFactorResolver } from './getMultiFactorResolver';\nimport { multiFactor, MultiFactorUser } from './multiFactor';\n\nconst statics = {\n  AppleAuthProvider,\n  EmailAuthProvider,\n  PhoneAuthProvider,\n  GoogleAuthProvider,\n  GithubAuthProvider,\n  TwitterAuthProvider,\n  FacebookAuthProvider,\n  PhoneMultiFactorGenerator,\n  OAuthProvider,\n  OIDCAuthProvider,\n  PhoneAuthState: {\n    CODE_SENT: 'sent',\n    AUTO_VERIFY_TIMEOUT: 'timeout',\n    AUTO_VERIFIED: 'verified',\n    ERROR: 'error',\n  },\n  getMultiFactorResolver,\n  multiFactor,\n};\n\nconst namespace = 'auth';\n\nconst nativeModuleName = 'RNFBAuthModule';\n\nclass FirebaseAuthModule extends FirebaseModule {\n  constructor(...args) {\n    super(...args);\n    this._user = null;\n    this._settings = null;\n    this._authResult = false;\n    this._languageCode = this.native.APP_LANGUAGE[this.app._name];\n    this._tenantId = null;\n\n    if (!this.languageCode) {\n      this._languageCode = this.native.APP_LANGUAGE['[DEFAULT]'];\n    }\n\n    if (this.native.APP_USER[this.app._name]) {\n      this._setUser(this.native.APP_USER[this.app._name]);\n    }\n\n    this.emitter.addListener(this.eventNameForApp('auth_state_changed'), event => {\n      this._setUser(event.user);\n      this.emitter.emit(this.eventNameForApp('onAuthStateChanged'), this._user);\n    });\n\n    this.emitter.addListener(this.eventNameForApp('phone_auth_state_changed'), event => {\n      const eventKey = `phone:auth:${event.requestKey}:${event.type}`;\n      this.emitter.emit(eventKey, event.state);\n    });\n\n    this.emitter.addListener(this.eventNameForApp('auth_id_token_changed'), auth => {\n      this._setUser(auth.user);\n      this.emitter.emit(this.eventNameForApp('onIdTokenChanged'), this._user);\n    });\n\n    this.native.addAuthStateListener();\n    this.native.addIdTokenListener();\n  }\n\n  get languageCode() {\n    return this._languageCode;\n  }\n\n  get tenantId() {\n    return this._tenantId;\n  }\n\n  get settings() {\n    if (!this._settings) {\n      this._settings = new Settings(this);\n    }\n    return this._settings;\n  }\n\n  get currentUser() {\n    return this._user;\n  }\n\n  _setUser(user) {\n    this._user = user ? new User(this, user) : null;\n    this._authResult = true;\n    this.emitter.emit(this.eventNameForApp('onUserChanged'), this._user);\n    return this._user;\n  }\n\n  _setUserCredential(userCredential) {\n    const user = new User(this, userCredential.user);\n    this._user = user;\n    this._authResult = true;\n    this.emitter.emit(this.eventNameForApp('onUserChanged'), this._user);\n    return {\n      additionalUserInfo: userCredential.additionalUserInfo,\n      user,\n    };\n  }\n\n  async setLanguageCode(code) {\n    if (!isString(code) && !isNull(code)) {\n      throw new Error(\n        \"firebase.auth().setLanguageCode(*) expected 'languageCode' to be a string or null value\",\n      );\n    }\n\n    await this.native.setLanguageCode(code);\n\n    if (code === null) {\n      this._languageCode = this.native.APP_LANGUAGE[this.app._name];\n\n      if (!this.languageCode) {\n        this._languageCode = this.native.APP_LANGUAGE['[DEFAULT]'];\n      }\n    } else {\n      this._languageCode = code;\n    }\n  }\n\n  async setTenantId(tenantId) {\n    if (!isString(tenantId)) {\n      throw new Error(\"firebase.auth().setTenantId(*) expected 'tenantId' to be a string\");\n    }\n    this._tenantId = tenantId;\n    await this.native.setTenantId(tenantId);\n  }\n\n  _parseListener(listenerOrObserver) {\n    return typeof listenerOrObserver === 'object'\n      ? listenerOrObserver.next.bind(listenerOrObserver)\n      : listenerOrObserver;\n  }\n\n  onAuthStateChanged(listenerOrObserver) {\n    const listener = this._parseListener(listenerOrObserver);\n    const subscription = this.emitter.addListener(\n      this.eventNameForApp('onAuthStateChanged'),\n      listener,\n    );\n\n    if (this._authResult) {\n      Promise.resolve().then(() => {\n        listener(this._user || null);\n      });\n    }\n    return () => subscription.remove();\n  }\n\n  onIdTokenChanged(listenerOrObserver) {\n    const listener = this._parseListener(listenerOrObserver);\n    const subscription = this.emitter.addListener(\n      this.eventNameForApp('onIdTokenChanged'),\n      listener,\n    );\n\n    if (this._authResult) {\n      Promise.resolve().then(() => {\n        listener(this._user || null);\n      });\n    }\n    return () => subscription.remove();\n  }\n\n  onUserChanged(listenerOrObserver) {\n    const listener = this._parseListener(listenerOrObserver);\n    const subscription = this.emitter.addListener(this.eventNameForApp('onUserChanged'), listener);\n    if (this._authResult) {\n      Promise.resolve().then(() => {\n        listener(this._user || null);\n      });\n    }\n\n    return () => {\n      subscription.remove();\n    };\n  }\n\n  signOut() {\n    return this.native.signOut().then(() => {\n      this._setUser();\n    });\n  }\n\n  signInAnonymously() {\n    return this.native\n      .signInAnonymously()\n      .then(userCredential => this._setUserCredential(userCredential));\n  }\n\n  signInWithPhoneNumber(phoneNumber, forceResend) {\n    if (isAndroid) {\n      return this.native\n        .signInWithPhoneNumber(phoneNumber, forceResend || false)\n        .then(result => new ConfirmationResult(this, result.verificationId));\n    }\n\n    return this.native\n      .signInWithPhoneNumber(phoneNumber)\n      .then(result => new ConfirmationResult(this, result.verificationId));\n  }\n\n  verifyPhoneNumber(phoneNumber, autoVerifyTimeoutOrForceResend, forceResend) {\n    let _forceResend = forceResend;\n    let _autoVerifyTimeout = 60;\n\n    if (isBoolean(autoVerifyTimeoutOrForceResend)) {\n      _forceResend = autoVerifyTimeoutOrForceResend;\n    } else {\n      _autoVerifyTimeout = autoVerifyTimeoutOrForceResend;\n    }\n\n    return new PhoneAuthListener(this, phoneNumber, _autoVerifyTimeout, _forceResend);\n  }\n\n  verifyPhoneNumberWithMultiFactorInfo(multiFactorHint, session) {\n    return this.native.verifyPhoneNumberWithMultiFactorInfo(multiFactorHint.uid, session);\n  }\n\n  verifyPhoneNumberForMultiFactor(phoneInfoOptions) {\n    const { phoneNumber, session } = phoneInfoOptions;\n    return this.native.verifyPhoneNumberForMultiFactor(phoneNumber, session);\n  }\n\n  resolveMultiFactorSignIn(session, verificationId, verificationCode) {\n    return this.native\n      .resolveMultiFactorSignIn(session, verificationId, verificationCode)\n      .then(userCredential => {\n        return this._setUserCredential(userCredential);\n      });\n  }\n\n  createUserWithEmailAndPassword(email, password) {\n    return this.native\n      .createUserWithEmailAndPassword(email, password)\n      .then(userCredential => this._setUserCredential(userCredential));\n  }\n\n  signInWithEmailAndPassword(email, password) {\n    return this.native\n      .signInWithEmailAndPassword(email, password)\n      .then(userCredential => this._setUserCredential(userCredential));\n  }\n\n  signInWithCustomToken(customToken) {\n    return this.native\n      .signInWithCustomToken(customToken)\n      .then(userCredential => this._setUserCredential(userCredential));\n  }\n\n  signInWithCredential(credential) {\n    return this.native\n      .signInWithCredential(credential.providerId, credential.token, credential.secret)\n      .then(userCredential => this._setUserCredential(userCredential));\n  }\n\n  sendPasswordResetEmail(email, actionCodeSettings = null) {\n    return this.native.sendPasswordResetEmail(email, actionCodeSettings);\n  }\n\n  sendSignInLinkToEmail(email, actionCodeSettings = {}) {\n    return this.native.sendSignInLinkToEmail(email, actionCodeSettings);\n  }\n\n  isSignInWithEmailLink(emailLink) {\n    return (\n      typeof emailLink === 'string' &&\n      (emailLink.includes('mode=signIn') || emailLink.includes('mode%3DsignIn')) &&\n      (emailLink.includes('oobCode=') || emailLink.includes('oobCode%3D'))\n    );\n  }\n\n  signInWithEmailLink(email, emailLink) {\n    return this.native\n      .signInWithEmailLink(email, emailLink)\n      .then(userCredential => this._setUserCredential(userCredential));\n  }\n\n  confirmPasswordReset(code, newPassword) {\n    return this.native.confirmPasswordReset(code, newPassword);\n  }\n\n  applyActionCode(code) {\n    return this.native.applyActionCode(code).then(user => {\n      this._setUser(user);\n    });\n  }\n\n  checkActionCode(code) {\n    return this.native.checkActionCode(code);\n  }\n\n  fetchSignInMethodsForEmail(email) {\n    return this.native.fetchSignInMethodsForEmail(email);\n  }\n\n  verifyPasswordResetCode(code) {\n    return this.native.verifyPasswordResetCode(code);\n  }\n\n  useUserAccessGroup(userAccessGroup) {\n    if (isAndroid) {\n      return Promise.resolve();\n    }\n    return this.native.useUserAccessGroup(userAccessGroup);\n  }\n\n  getRedirectResult() {\n    throw new Error(\n      'firebase.auth().getRedirectResult() is unsupported by the native Firebase SDKs.',\n    );\n  }\n\n  setPersistence() {\n    throw new Error('firebase.auth().setPersistence() is unsupported by the native Firebase SDKs.');\n  }\n\n  signInWithPopup() {\n    throw new Error(\n      'firebase.auth().signInWithPopup() is unsupported by the native Firebase SDKs.',\n    );\n  }\n\n  signInWithRedirect() {\n    throw new Error(\n      'firebase.auth().signInWithRedirect() is unsupported by the native Firebase SDKs.',\n    );\n  }\n\n  // firebase issue - https://github.com/invertase/react-native-firebase/pull/655#issuecomment-349904680\n  useDeviceLanguage() {\n    throw new Error(\n      'firebase.auth().useDeviceLanguage() is unsupported by the native Firebase SDKs.',\n    );\n  }\n\n  useEmulator(url) {\n    if (!url || !isString(url) || !isValidUrl(url)) {\n      throw new Error('firebase.auth().useEmulator() takes a non-empty string URL');\n    }\n\n    let _url = url;\n    const androidBypassEmulatorUrlRemap =\n      typeof this.firebaseJson.android_bypass_emulator_url_remap === 'boolean' &&\n      this.firebaseJson.android_bypass_emulator_url_remap;\n    if (!androidBypassEmulatorUrlRemap && isAndroid && _url) {\n      if (_url.startsWith('http://localhost')) {\n        _url = _url.replace('http://localhost', 'http://10.0.2.2');\n        // eslint-disable-next-line no-console\n        console.log(\n          'Mapping auth host \"localhost\" to \"10.0.2.2\" for android emulators. Use real IP on real devices. You can bypass this behaviour with \"android_bypass_emulator_url_remap\" flag.',\n        );\n      }\n      if (_url.startsWith('http://127.0.0.1')) {\n        _url = _url.replace('http://127.0.0.1', 'http://10.0.2.2');\n        // eslint-disable-next-line no-console\n        console.log(\n          'Mapping auth host \"127.0.0.1\" to \"10.0.2.2\" for android emulators. Use real IP on real devices. You can bypass this behaviour with \"android_bypass_emulator_url_remap\" flag.',\n        );\n      }\n    }\n\n    // Native calls take the host and port split out\n    const hostPortRegex = /^http:\\/\\/([\\w\\d-.]+):(\\d+)$/;\n    const urlMatches = _url.match(hostPortRegex);\n    if (!urlMatches) {\n      throw new Error('firebase.auth().useEmulator() unable to parse host and port from URL');\n    }\n    const host = urlMatches[1];\n    const port = parseInt(urlMatches[2], 10);\n    this.native.useEmulator(host, port);\n    return [host, port]; // undocumented return, useful for unit testing\n  }\n\n  getMultiFactorResolver(error) {\n    return getMultiFactorResolver(this, error);\n  }\n\n  multiFactor(user) {\n    if (user.userId !== this.currentUser.userId) {\n      throw new Error('firebase.auth().multiFactor() only operates on currentUser');\n    }\n    return new MultiFactorUser(this, user);\n  }\n}\n\n// import { SDK_VERSION } from '@react-native-firebase/auth';\nexport const SDK_VERSION = version;\n\n// import auth from '@react-native-firebase/auth';\n// auth().X(...);\nexport default createModuleNamespace({\n  statics,\n  version,\n  namespace,\n  nativeModuleName,\n  nativeEvents: ['auth_state_changed', 'auth_id_token_changed', 'phone_auth_state_changed'],\n  hasMultiAppSupport: true,\n  hasCustomUrlOrRegionSupport: false,\n  ModuleClass: FirebaseAuthModule,\n});\n\n// import auth, { firebase } from '@react-native-firebase/auth';\n// auth().X(...);\n// firebase.auth().X(...);\nexport const firebase = getFirebaseRoot();\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}