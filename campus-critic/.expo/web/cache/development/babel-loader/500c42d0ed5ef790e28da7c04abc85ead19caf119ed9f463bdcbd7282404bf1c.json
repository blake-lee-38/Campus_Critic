{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nvar providerId = 'google.com';\nvar GoogleAuthProvider = function () {\n  function GoogleAuthProvider() {\n    _classCallCheck(this, GoogleAuthProvider);\n    throw new Error('`new GoogleAuthProvider()` is not supported on the native Firebase SDKs.');\n  }\n  _createClass(GoogleAuthProvider, null, [{\n    key: \"PROVIDER_ID\",\n    get: function get() {\n      return providerId;\n    }\n  }, {\n    key: \"credential\",\n    value: function credential(token, secret) {\n      return {\n        token: token,\n        secret: secret,\n        providerId: providerId\n      };\n    }\n  }]);\n  return GoogleAuthProvider;\n}();\nexport { GoogleAuthProvider as default };","map":{"version":3,"names":["providerId","GoogleAuthProvider","_classCallCheck","Error","_createClass","key","get","value","credential","token","secret","default"],"sources":["C:/Users/Blake/Desktop/VS-Code-Projects/Campus_Critic/node_modules/@react-native-firebase/auth/lib/providers/GoogleAuthProvider.js"],"sourcesContent":["/*\n * Copyright (c) 2016-present Invertase Limited & Contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this library except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nconst providerId = 'google.com';\n\nexport default class GoogleAuthProvider {\n  constructor() {\n    throw new Error('`new GoogleAuthProvider()` is not supported on the native Firebase SDKs.');\n  }\n\n  static get PROVIDER_ID() {\n    return providerId;\n  }\n\n  static credential(token, secret) {\n    return {\n      token,\n      secret,\n      providerId,\n    };\n  }\n}\n"],"mappings":";;AAiBA,IAAMA,UAAU,GAAG,YAAY;AAAC,IAEXC,kBAAkB;EACrC,SAAAA,mBAAA,EAAc;IAAAC,eAAA,OAAAD,kBAAA;IACZ,MAAM,IAAIE,KAAK,CAAC,0EAA0E,CAAC;EAC7F;EAACC,YAAA,CAAAH,kBAAA;IAAAI,GAAA;IAAAC,GAAA,EAED,SAAAA,IAAA,EAAyB;MACvB,OAAON,UAAU;IACnB;EAAC;IAAAK,GAAA;IAAAE,KAAA,EAED,SAAAC,WAAkBC,KAAK,EAAEC,MAAM,EAAE;MAC/B,OAAO;QACLD,KAAK,EAALA,KAAK;QACLC,MAAM,EAANA,MAAM;QACNV,UAAU,EAAVA;MACF,CAAC;IACH;EAAC;EAAA,OAAAC,kBAAA;AAAA;AAAA,SAfkBA,kBAAkB,IAAAU,OAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}