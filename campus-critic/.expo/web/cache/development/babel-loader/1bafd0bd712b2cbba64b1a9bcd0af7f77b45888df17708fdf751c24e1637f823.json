{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport { createUserWithEmailAndPassword, signInWithEmailAndPassword, signInWithRedirect, auth } from \"firebase/auth\";\nimport { GoogleSignin } from \"@react-native-google-signin/google-signin\";\nGoogleSignin.configure({\n  webClientId: \"642430350313-fbd6la090g01hl0jc8ri0jbjh8ab0d3l.apps.googleusercontent.com\"\n});\nexport var signUp = function () {\n  var _ref = _asyncToGenerator(function* (email, pass) {\n    var passRegex = /^(?=.*?[!@#$%^&*()_+\\-=\\[\\]{};:\"\\\\|,.<>\\/?])(?=.*?[a-zA-z])(?=.*?[0-9]).{8,50}$/;\n    var emailRegex = /^[\\w\\.-]+@[\\w\\.-]+\\.(edu)$/;\n    if (email.match(emailRegex) && pass.match(passRegex)) {\n      try {\n        var userCredential = yield createUserWithEmailAndPassword(auth, email, pass);\n        var user = userCredential.user;\n        console.log(\"User created!\", user);\n        return {\n          message: \"Success\",\n          user: \"user\"\n        };\n      } catch (error) {\n        return {\n          message: error.message\n        };\n      }\n    } else if (email.match(emailRegex)) {\n      return {\n        message: \"Password does not follow requirements\"\n      };\n    } else if (pass.match(passRegex)) {\n      return {\n        message: \"Email must be a .edu email\"\n      };\n    } else {\n      return {\n        message: \"Email and Password do not follow requirements\"\n      };\n    }\n  });\n  return function signUp(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport var signIn = function () {\n  var _ref2 = _asyncToGenerator(function* (email, pass) {\n    try {\n      var userCredential = yield signInWithEmailAndPassword(auth, email, pass);\n      var user = userCredential.user;\n      console.log(\"User signed In!\", user);\n      return {\n        message: \"Success\",\n        user: \"user\"\n      };\n    } catch (error) {\n      return {\n        message: error.message\n      };\n    }\n  });\n  return function signIn(_x3, _x4) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nexport var signUpGoogle = function () {\n  var _ref3 = _asyncToGenerator(function* () {\n    yield GoogleSignin.hasPlayServices({\n      showPlayServicesUpdateDialog: true\n    });\n    var _yield$GoogleSignin$s = yield GoogleSignin.signIn(),\n      idToken = _yield$GoogleSignin$s.idToken;\n    var googleCredential = auth.GoogleAuthProvider.credential(idToken);\n    return auth().signInWithCredential(googleCredential);\n  });\n  return function signUpGoogle() {\n    return _ref3.apply(this, arguments);\n  };\n}();","map":{"version":3,"names":["createUserWithEmailAndPassword","signInWithEmailAndPassword","signInWithRedirect","auth","GoogleSignin","configure","webClientId","signUp","_ref","_asyncToGenerator","email","pass","passRegex","emailRegex","match","userCredential","user","console","log","message","error","_x","_x2","apply","arguments","signIn","_ref2","_x3","_x4","signUpGoogle","_ref3","hasPlayServices","showPlayServicesUpdateDialog","_yield$GoogleSignin$s","idToken","googleCredential","GoogleAuthProvider","credential","signInWithCredential"],"sources":["C:/Users/Blake/Desktop/VS-Code-Projects/Campus_Critic/campus-critic/methods/auth.js"],"sourcesContent":["import {\r\n  createUserWithEmailAndPassword,\r\n  signInWithEmailAndPassword,\r\n  signInWithRedirect,\r\n  auth,\r\n} from \"firebase/auth\";\r\nimport { GoogleSignin } from \"@react-native-google-signin/google-signin\";\r\n\r\nGoogleSignin.configure({\r\n  webClientId:\r\n    \"642430350313-fbd6la090g01hl0jc8ri0jbjh8ab0d3l.apps.googleusercontent.com\",\r\n});\r\n\r\nexport const signUp = async (email, pass) => {\r\n  // RE ensures password has 1 special character, 1 uppercase/lowercase letter, 1 num, and is at least 8 characters long\r\n  var passRegex =\r\n    /^(?=.*?[!@#$%^&*()_+\\-=\\[\\]{};:\"\\\\|,.<>\\/?])(?=.*?[a-zA-z])(?=.*?[0-9]).{8,50}$/;\r\n\r\n  // RE ensures email is a .edu email\r\n  var emailRegex = /^[\\w\\.-]+@[\\w\\.-]+\\.(edu)$/;\r\n\r\n  if (email.match(emailRegex) && pass.match(passRegex)) {\r\n    try {\r\n      const userCredential = await createUserWithEmailAndPassword(\r\n        auth,\r\n        email,\r\n        pass\r\n      );\r\n      const user = userCredential.user;\r\n      console.log(\"User created!\", user);\r\n      return { message: \"Success\", user: \"user\" };\r\n    } catch (error) {\r\n      return { message: error.message };\r\n    }\r\n  } else if (email.match(emailRegex)) {\r\n    return { message: \"Password does not follow requirements\" };\r\n  } else if (pass.match(passRegex)) {\r\n    return { message: \"Email must be a .edu email\" };\r\n  } else {\r\n    return { message: \"Email and Password do not follow requirements\" };\r\n  }\r\n};\r\n\r\nexport const signIn = async (email, pass) => {\r\n  try {\r\n    const userCredential = await signInWithEmailAndPassword(auth, email, pass);\r\n    const user = userCredential.user;\r\n    console.log(\"User signed In!\", user);\r\n    return { message: \"Success\", user: \"user\" };\r\n  } catch (error) {\r\n    return { message: error.message };\r\n  }\r\n};\r\n\r\nexport const signUpGoogle = async () => {\r\n  await GoogleSignin.hasPlayServices({ showPlayServicesUpdateDialog: true });\r\n\r\n  const { idToken } = await GoogleSignin.signIn();\r\n\r\n  const googleCredential = auth.GoogleAuthProvider.credential(idToken);\r\n\r\n  return auth().signInWithCredential(googleCredential);\r\n};\r\n"],"mappings":";AAAA,SACEA,8BAA8B,EAC9BC,0BAA0B,EAC1BC,kBAAkB,EAClBC,IAAI,QACC,eAAe;AACtB,SAASC,YAAY,QAAQ,2CAA2C;AAExEA,YAAY,CAACC,SAAS,CAAC;EACrBC,WAAW,EACT;AACJ,CAAC,CAAC;AAEF,OAAO,IAAMC,MAAM;EAAA,IAAAC,IAAA,GAAAC,iBAAA,CAAG,WAAOC,KAAK,EAAEC,IAAI,EAAK;IAE3C,IAAIC,SAAS,GACX,iFAAiF;IAGnF,IAAIC,UAAU,GAAG,4BAA4B;IAE7C,IAAIH,KAAK,CAACI,KAAK,CAACD,UAAU,CAAC,IAAIF,IAAI,CAACG,KAAK,CAACF,SAAS,CAAC,EAAE;MACpD,IAAI;QACF,IAAMG,cAAc,SAASf,8BAA8B,CACzDG,IAAI,EACJO,KAAK,EACLC,IACF,CAAC;QACD,IAAMK,IAAI,GAAGD,cAAc,CAACC,IAAI;QAChCC,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEF,IAAI,CAAC;QAClC,OAAO;UAAEG,OAAO,EAAE,SAAS;UAAEH,IAAI,EAAE;QAAO,CAAC;MAC7C,CAAC,CAAC,OAAOI,KAAK,EAAE;QACd,OAAO;UAAED,OAAO,EAAEC,KAAK,CAACD;QAAQ,CAAC;MACnC;IACF,CAAC,MAAM,IAAIT,KAAK,CAACI,KAAK,CAACD,UAAU,CAAC,EAAE;MAClC,OAAO;QAAEM,OAAO,EAAE;MAAwC,CAAC;IAC7D,CAAC,MAAM,IAAIR,IAAI,CAACG,KAAK,CAACF,SAAS,CAAC,EAAE;MAChC,OAAO;QAAEO,OAAO,EAAE;MAA6B,CAAC;IAClD,CAAC,MAAM;MACL,OAAO;QAAEA,OAAO,EAAE;MAAgD,CAAC;IACrE;EACF,CAAC;EAAA,gBA5BYZ,MAAMA,CAAAc,EAAA,EAAAC,GAAA;IAAA,OAAAd,IAAA,CAAAe,KAAA,OAAAC,SAAA;EAAA;AAAA,GA4BlB;AAED,OAAO,IAAMC,MAAM;EAAA,IAAAC,KAAA,GAAAjB,iBAAA,CAAG,WAAOC,KAAK,EAAEC,IAAI,EAAK;IAC3C,IAAI;MACF,IAAMI,cAAc,SAASd,0BAA0B,CAACE,IAAI,EAAEO,KAAK,EAAEC,IAAI,CAAC;MAC1E,IAAMK,IAAI,GAAGD,cAAc,CAACC,IAAI;MAChCC,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAEF,IAAI,CAAC;MACpC,OAAO;QAAEG,OAAO,EAAE,SAAS;QAAEH,IAAI,EAAE;MAAO,CAAC;IAC7C,CAAC,CAAC,OAAOI,KAAK,EAAE;MACd,OAAO;QAAED,OAAO,EAAEC,KAAK,CAACD;MAAQ,CAAC;IACnC;EACF,CAAC;EAAA,gBATYM,MAAMA,CAAAE,GAAA,EAAAC,GAAA;IAAA,OAAAF,KAAA,CAAAH,KAAA,OAAAC,SAAA;EAAA;AAAA,GASlB;AAED,OAAO,IAAMK,YAAY;EAAA,IAAAC,KAAA,GAAArB,iBAAA,CAAG,aAAY;IACtC,MAAML,YAAY,CAAC2B,eAAe,CAAC;MAAEC,4BAA4B,EAAE;IAAK,CAAC,CAAC;IAE1E,IAAAC,qBAAA,SAA0B7B,YAAY,CAACqB,MAAM,CAAC,CAAC;MAAvCS,OAAO,GAAAD,qBAAA,CAAPC,OAAO;IAEf,IAAMC,gBAAgB,GAAGhC,IAAI,CAACiC,kBAAkB,CAACC,UAAU,CAACH,OAAO,CAAC;IAEpE,OAAO/B,IAAI,CAAC,CAAC,CAACmC,oBAAoB,CAACH,gBAAgB,CAAC;EACtD,CAAC;EAAA,gBARYN,YAAYA,CAAA;IAAA,OAAAC,KAAA,CAAAP,KAAA,OAAAC,SAAA;EAAA;AAAA,GAQxB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}