{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nvar providerId = 'phone';\nvar PhoneAuthProvider = function () {\n  function PhoneAuthProvider() {\n    _classCallCheck(this, PhoneAuthProvider);\n    throw new Error('`new PhoneAuthProvider()` is not supported on the native Firebase SDKs.');\n  }\n  _createClass(PhoneAuthProvider, null, [{\n    key: \"PROVIDER_ID\",\n    get: function get() {\n      return providerId;\n    }\n  }, {\n    key: \"credential\",\n    value: function credential(verificationId, code) {\n      return {\n        token: verificationId,\n        secret: code,\n        providerId: providerId\n      };\n    }\n  }]);\n  return PhoneAuthProvider;\n}();\nexport { PhoneAuthProvider as default };","map":{"version":3,"names":["providerId","PhoneAuthProvider","_classCallCheck","Error","_createClass","key","get","value","credential","verificationId","code","token","secret","default"],"sources":["C:/Users/Blake/Desktop/VS-Code-Projects/Campus_Critic/campus-critic/node_modules/@react-native-firebase/auth/lib/providers/PhoneAuthProvider.js"],"sourcesContent":["/*\n * Copyright (c) 2016-present Invertase Limited & Contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this library except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nconst providerId = 'phone';\n\nexport default class PhoneAuthProvider {\n  constructor() {\n    throw new Error('`new PhoneAuthProvider()` is not supported on the native Firebase SDKs.');\n  }\n\n  static get PROVIDER_ID() {\n    return providerId;\n  }\n\n  static credential(verificationId, code) {\n    return {\n      token: verificationId,\n      secret: code,\n      providerId,\n    };\n  }\n}\n"],"mappings":";;AAiBA,IAAMA,UAAU,GAAG,OAAO;AAAC,IAENC,iBAAiB;EACpC,SAAAA,kBAAA,EAAc;IAAAC,eAAA,OAAAD,iBAAA;IACZ,MAAM,IAAIE,KAAK,CAAC,yEAAyE,CAAC;EAC5F;EAACC,YAAA,CAAAH,iBAAA;IAAAI,GAAA;IAAAC,GAAA,EAED,SAAAA,IAAA,EAAyB;MACvB,OAAON,UAAU;IACnB;EAAC;IAAAK,GAAA;IAAAE,KAAA,EAED,SAAAC,WAAkBC,cAAc,EAAEC,IAAI,EAAE;MACtC,OAAO;QACLC,KAAK,EAAEF,cAAc;QACrBG,MAAM,EAAEF,IAAI;QACZV,UAAU,EAAVA;MACF,CAAC;IACH;EAAC;EAAA,OAAAC,iBAAA;AAAA;AAAA,SAfkBA,iBAAiB,IAAAY,OAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}