{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport { createUserWithEmailAndPassword } from \"firebase/auth\";\nimport { auth } from \"../config/firebaseConfig\";\nexport var signUp = function () {\n  var _ref = _asyncToGenerator(function* (email, pass) {\n    var passRegex = /^(?=.*?[!@#$%^&*()_+\\-=\\[\\]{};:\"\\\\|,.<>\\/?])(?=.*?[a-z])(?=.*?[A-Z])(?=.*?[0-9]).{8,}$/;\n    var emailRegex = /^[\\w\\.-]+@[\\w\\.-]+\\.(edu)$/;\n    if (email.match(emailRegex) && pass.match(passRegex)) {\n      try {\n        var userCredential = yield createUserWithEmailAndPassword(auth, email, pass);\n        var user = userCredential.user;\n        console.log(\"User created!\", user);\n        return {\n          message: \"Success\",\n          user: \"user\"\n        };\n      } catch (error) {\n        return {\n          message: error.message\n        };\n      }\n    } else if (email.match(emailRegex)) {\n      return {\n        message: \"Password does not follow requirements\"\n      };\n    } else if (pass.match(passRegex)) {\n      return {\n        message: \"Email must be a .edu email\"\n      };\n    } else {\n      return {\n        message: \"Email and Password do not follow requirements\"\n      };\n    }\n  });\n  return function signUp(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();","map":{"version":3,"names":["createUserWithEmailAndPassword","auth","signUp","_ref","_asyncToGenerator","email","pass","passRegex","emailRegex","match","userCredential","user","console","log","message","error","_x","_x2","apply","arguments"],"sources":["C:/Users/Blake/Desktop/VS-Code-Projects/Campus_Critic/campus-critic/methods/signIn.js"],"sourcesContent":["import { createUserWithEmailAndPassword } from \"firebase/auth\";\r\nimport { auth } from \"../config/firebaseConfig\";\r\n\r\nexport const signUp = async (email, pass) => {\r\n  // RE ensures password has 1 special character, 1 uppercase/lowercase letter, 1 num, and is at least 8 characters long\r\n  var passRegex =\r\n    /^(?=.*?[!@#$%^&*()_+\\-=\\[\\]{};:\"\\\\|,.<>\\/?])(?=.*?[a-z])(?=.*?[A-Z])(?=.*?[0-9]).{8,}$/;\r\n\r\n  // RE ensures email is a .edu email\r\n  var emailRegex = /^[\\w\\.-]+@[\\w\\.-]+\\.(edu)$/;\r\n\r\n  if (email.match(emailRegex) && pass.match(passRegex)) {\r\n    try {\r\n      const userCredential = await createUserWithEmailAndPassword(\r\n        auth,\r\n        email,\r\n        pass\r\n      );\r\n      const user = userCredential.user;\r\n      console.log(\"User created!\", user);\r\n      return { message: \"Success\", user: \"user\" };\r\n    } catch (error) {\r\n      return { message: error.message };\r\n    }\r\n  } else if (email.match(emailRegex)) {\r\n    return { message: \"Password does not follow requirements\" };\r\n  } else if (pass.match(passRegex)) {\r\n    return { message: \"Email must be a .edu email\" };\r\n  } else {\r\n    return { message: \"Email and Password do not follow requirements\" };\r\n  }\r\n};\r\n"],"mappings":";AAAA,SAASA,8BAA8B,QAAQ,eAAe;AAC9D,SAASC,IAAI;AAEb,OAAO,IAAMC,MAAM;EAAA,IAAAC,IAAA,GAAAC,iBAAA,CAAG,WAAOC,KAAK,EAAEC,IAAI,EAAK;IAE3C,IAAIC,SAAS,GACX,wFAAwF;IAG1F,IAAIC,UAAU,GAAG,4BAA4B;IAE7C,IAAIH,KAAK,CAACI,KAAK,CAACD,UAAU,CAAC,IAAIF,IAAI,CAACG,KAAK,CAACF,SAAS,CAAC,EAAE;MACpD,IAAI;QACF,IAAMG,cAAc,SAASV,8BAA8B,CACzDC,IAAI,EACJI,KAAK,EACLC,IACF,CAAC;QACD,IAAMK,IAAI,GAAGD,cAAc,CAACC,IAAI;QAChCC,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEF,IAAI,CAAC;QAClC,OAAO;UAAEG,OAAO,EAAE,SAAS;UAAEH,IAAI,EAAE;QAAO,CAAC;MAC7C,CAAC,CAAC,OAAOI,KAAK,EAAE;QACd,OAAO;UAAED,OAAO,EAAEC,KAAK,CAACD;QAAQ,CAAC;MACnC;IACF,CAAC,MAAM,IAAIT,KAAK,CAACI,KAAK,CAACD,UAAU,CAAC,EAAE;MAClC,OAAO;QAAEM,OAAO,EAAE;MAAwC,CAAC;IAC7D,CAAC,MAAM,IAAIR,IAAI,CAACG,KAAK,CAACF,SAAS,CAAC,EAAE;MAChC,OAAO;QAAEO,OAAO,EAAE;MAA6B,CAAC;IAClD,CAAC,MAAM;MACL,OAAO;QAAEA,OAAO,EAAE;MAAgD,CAAC;IACrE;EACF,CAAC;EAAA,gBA5BYZ,MAAMA,CAAAc,EAAA,EAAAC,GAAA;IAAA,OAAAd,IAAA,CAAAe,KAAA,OAAAC,SAAA;EAAA;AAAA,GA4BlB"},"metadata":{},"sourceType":"module","externalDependencies":[]}